{"version":3,"sources":["components/Timer.jsx","App.js","reportWebVitals.js","index.js"],"names":["format","time","minutes","Math","floor","seconds","Timer","autostart","step","useState","setSeconds","isActive","setIsActive","useEffect","timer","setInterval","clearInterval","className","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAEMA,EAAS,SAAAC,GACX,IAAIC,EAAUC,KAAKC,MAAMH,EAAO,IAC7BC,EAAU,KACbA,EAAU,IAAKA,GACf,IAAIG,EAAUJ,EAAO,GAGrB,OAFGI,EAAU,KACbA,EAAU,IAAKA,GACT,GAAN,OAAUH,EAAV,YAAqBG,IAiCVC,EA9BD,SAAC,GAA8B,IAA5BL,EAA2B,EAA3BA,KAAMM,EAAqB,EAArBA,UAAWC,EAAU,EAAVA,KAC9B,EAAgCC,mBAASR,GAAzC,mBAAQI,EAAR,KAAiBK,EAAjB,KACA,EAAkCD,mBAASF,GAA3C,mBAAQI,EAAR,KAAkBC,EAAlB,KAkBA,OAhBAC,qBAAU,WACN,GAAIR,EAAU,GAAKM,EAAU,CACzB,IAAIG,EAAQ,KAQZ,OAPiB,IAAbH,IACAG,EAAQC,aAAY,WAChBL,EAAYL,EAAUG,KACvB,IAAKA,IAIL,WACHQ,cAAcF,OAGvB,CAACT,EAASM,EAAUH,IAGnB,8BACI,sBAAKS,UAAU,QAAf,UACI,sBAAMA,UAAU,OAAhB,SAAwBjB,EAAOK,KAC/B,wBAAQa,QAAS,kBAAMN,GAAaD,IAApC,SAAiDA,EAAW,OAAS,gBCvBtEQ,MATf,WACE,OACE,sBAAKF,UAAU,MAAf,UACG,cAAC,EAAD,CAAOhB,KAAK,MAAMO,KAAK,IAAID,WAAW,IACvC,cAAC,EAAD,CAAON,KAAK,MAAMO,KAAK,IAAID,WAAW,QCI7Ba,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c1cafe9c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst format = time => {\n    let minutes = Math.floor(time / 60);\n    if(minutes < 10)\n    minutes = '0'+ minutes;\n    let seconds = time % 60;\n    if(seconds < 10)\n    seconds = '0'+ seconds;\n    return `${minutes}:${seconds}`;\n};\n\nconst Timer = ({ time, autostart, step}) => {\n    const [ seconds, setSeconds ] = useState(time);\n    const [ isActive, setIsActive ] = useState(autostart);\n\n    useEffect(() => {\n        if (seconds > 0 && isActive) {\n            let timer = null;\n            if( isActive === true ) {\n                timer = setInterval(() =>{\n                    setSeconds( seconds - step);\n                }, 1000*step);\n                \n            }\n\n            return () => {\n                clearInterval(timer);\n            }\n        }\n    }, [seconds, isActive, step,]);\n\n    return (\n        <div>\n            <div className='timer'>\n                <time className='time'>{format(seconds)}</time>\n                <button onClick={() => setIsActive(!isActive) }>{isActive ? 'stop' : 'start'}</button>\n            </div>\n        </div>\n    );\n}\n\nexport default Timer;","import './App.css';\nimport './components/assets/css/style.css';\nimport Timer from './components/Timer.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Timer time='180' step='1' autostart={false} />\n      <Timer time='700' step='2' autostart={true} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}